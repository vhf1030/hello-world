1일 1커밋 시작!

0. 중요
 - 백업파일 다운로드 - 완료

1. 프로젝트
 - 홈페이지 만들기: GitHub.io (x)
 - 동적 웹 페이지 만들기: home server + django
   가상화폐 거래량 확인 사이트
 
  한거
  - github.io 검토
   GitHub.io URL 등록 완료: https://vhf1030.github.io/home/
   git cmd 실행 확인 완료
   github.io는 정적페이지밖에 만들지 못함
  - home server 및 django 검토
  - 프로젝트 시작
   django를 이용한 동적 웹페이지 구현
   home server 이용
   
  할거
  - Ruby 및 Jekyll 설치 (x)
  참고: https://theorydb.github.io/envops/2019/05/03/envops-blog-github-pages-jekyll/
  - home server: 유튜브 강의 보기(생활코딩)
  - django: 점프 투 장고 보면서 실습하기
  참고: https://wikidocs.net/book/4223
  - 계획표
    ~03/07: 점프 투 장고 2장 실습 / 가상화폐 거래내역 스크래핑 모델 구현
    ~03/14: 점프 투 장고 3장 실습 / home server 유튜브 강의
    ~03/21: 점프 투 장고 4장 실습 / home server 적용 실습
    ~03/28: jango 이용하여 거래량 확인 서비스 배포
  
2. 히스토리
 - 210221
  3시반 출근 9시 퇴근
  퇴근 후에 노트북부터 켜기!
 - 210222
  노트북 키는건 성공
 - 210223
  하루 1시간 이상 공부, 10시전 맥주 마시지 않기
 - 210224
  오늘은 태윤씨랑 술을 마셨다
  너무 좋다 
  화이팅!
 - 210225
  가상화폐 거래량 확인 사이트를 만들자
  https://theorydb.github.io/ fork 및 연동 확인 완료
  https://theorydb.github.io/envops/2019/05/01/envops-blog-intro/
  내일은 테마를 이용하여 빈 페이지를 만들어보자
  https://github.com/StartBootstrap/startbootstrap-clean-blog-jekyll
 - 210226
  jykyll 테마 설정
  테마를 사용할지 말지 생각해보기
  동적 페이지 생성 방법 확인해보기 - github.io로는 안된다고 함
  -> home server 공부하기 및 django 확인하기
 - 210227
  주말에는 오전에 공부하기
  django 학습: 점프 투 장고로 진행
  파이썬 설치부터 새로 진행!!
  1-04까지 완료!
 - 210228
  2-02까지 완료!
  url 생성 및 모델 생성
  참고: docs.djangoproject.com/en/3.0/topics/db/queries (장고 공식 문서(데이터 조회 관련))
 - 210301
  비행기 결항으로 commit 실패
 - 210302
  (cmd)
  run_mysite
  python manage.py runserver
  http://127.0.0.1:8000/pybo/
  장고 admin 편의기능
  참고: docs.djangoproject.com/en/3.0/ref/contrib/admin
  장고 html template 태그 사용
  참고: docs.djangoproject.com/en/3.0/topics/templates
  2-05까지 완료!
  계획표 작성
 - 210303
  9시 퇴근
  일단 일기만 쓰고 오늘은 끝
  내일도 야근 예정..
 - 210304
  오늘은 야근을 하진 않았으나, 맥주를 마시고 잠들어버렸다...
  10시 전 맥주 마시지 않기!!
 - 210307
  금, 토요일 커밋 실패
  금요일에는 퇴근 후 시간내기가 어려움 - 대책필요
  토요일에는 일어나자 마자 카페가는 습관 들이기
  백업파일 다운로드 완료
  빗썸 거래량 관련 기사 - http://www.cbci.co.kr/news/articleView.html?idxno=320817
  웹크롤러 개념 설명 - https://lyb1495.tistory.com/17
  구현하려는 사이트는 웹크롤러 라기보다 웹스크래퍼의 개념이 맞는 듯
  웹 스크래퍼 구현 강의 - https://nomadcoders.co/python-for-beginners
  업비트 open api 이용 - https://docs.upbit.com/reference
  repvol/Scripts/get_api_upbit.py
 - 210308
  퇴근후 맥주를 마셨지만 카페에 왔다
  칼퇴 후 7시 전 카페에 가는 습관을 들이자!
  업비트 open api 이용 거래량 알림 모델 구현 진행(50%)
  부트스트랩 적용
  부트스트랩 공식 문서: getbootstrap.com/docs/4.5/getting-started/introduction
  점프 투 장고 2-08까지 완료!
 - 210309
  점프 투 장고 2-10까지 완료!
  화이팅!
 - 210310
  8시반까지 야근을 했다.
  야 근 조 아
 - 210311
  점심회식때 소주를 마셨다.
  낮술은 회사가 직원에게 줄 수 있는 최고의 복지라고 생각한다.
  점프 투 장고 3-2까지 완료!
 - 210312
  관리계정(admin)
  id: v* / pw: c*
  점프 투 장고 3-5까지 완료!
 - 210314
  단순히 체한거였는지, 식중독이었는지 모르겠지만 지금은 괜찮은 것 같다.
  먹을거를 잘 가려서 먹자.
  점프 투 장고 3-8까지 완료!
 - 210315
  점프 투 장고 3-9까지 완료!
  슬슬 home server 유튜브 및 거래량 확인모델 시작하기!
 - 210316
  유튜브 생활코딩 home server 1회 정주행 후 취침하기!
  성공
 - 210317
  github project 생성: CopyMoney
  모델 구현에 집중
 - 210320
  모델 구현에 집중했다
  좀만 더하고 장고 연동을 시작해보자
  점프 투 장고 3-10까지 완료!
  * 장고 기능 개발 패턴 정리
  1. 화면에 버튼 등 기능 추가하기 (models.py)
  2. urls.py 파일에 기능에 해당하는 URL 매핑 추가하기
  3. forms.py 파일에 폼 작성하기
  4. views.py 파일에 URL 매핑에 추가한 함수 작성하기
  5. 함수에서 사용할 템플릿 작성하기
 - 210321
  점프 투 장고 3-11까지 완료!
  구현할 것:
  1. 거래소 전체 거래량 출력
  2. 200분 데이터 활용 통계 / 머신러닝 모델
 - 210322
  모델 구현중
  더 할수 있는 것을 찾아보자
 - 210323
  존버는 승리한다..
 - 210324
  사나이테스트 통과
  전체 거래 모델 구현에 집중
 - 210326
  평균거래가 계산(누적거래금액/누적거래량)
  전체거래가 변동률 확인 필요 - 너무 높게 나온다... (1.4 ~ 2.5)
 - 210329
  도약을 위한 휴식 완료
  할 수 있다 화이팅!
 - 210331
  해야할 것:
  1. 평균거래가 그래프 구글차트 시각화
  2. 투자내역 인덱스 UI 설계
  3. 자동매매 모델 구현
  4. 일정 수립
 - 210404
  점프 투 장고 3-12 완료!
  전체 거래가 확인 로직 수정
 - 210408
  차장님 면담 완료
  마음이 너무 가볍당
 - 210411
  점프 투 장고 3-13 완료!
 - 210413
  점프 투 장고 3-14 완료!
  질문내역 정리 ( Question.objects.filter(subject__startswith='테스트').delete() )
 - 210418
  포트폴리오 파이프라인 설계
 - 210421
  앞으로 맥주는 공부 후에 마시자
  18일날 깜빡하고 commit을 누르지 못했다..
  copy money 파이프라인 2.filter 까지 완료
 - 210425
  프로젝트명: 가투
 - 210426
  get_api_upbit version1
  4.check 단계에서 전체 동향 파악 -진행중
 - 210505
  다른 사람들이 하는 일에 초점을 맞출 필요는 없다
  내가 잘하는걸 하자
 - 210521
  퇴사!
  내가 하려는 일과 해야하는 이유에 대해 생각해보자!
 - 210524
  210525: Naver AI Now
  210526~: 코리아 핀테크
 - 210526
  가투 - 전체마켓 통계량 확인 모델 구현
 - 210527
  해야할 것 정리 및 일정 수립
  - 자동매매 모델 구현(룰베이스 기반): 0531
  - 데이터 수집
  - 평균거래가 그래프 구글차트 시각화
  - 투자내역 인덱스 UI 설계
  - 서버 구축(홈서버)
  - 예측모델 구현(머신러닝 기반)
  - 자동매매 모델 적용(머신러닝 기반)
  - 서버 구축(AWS)
 - 210528
  딕셔너리 키값을 업비트 제공 API와 유사하게 변경 
 - 210529
  전체 마켓 종가 및 평균가 보정값 계산 구현 
  기능 추가 예정
  - 각 마켓 이전 180분 대비 거래 금액 비중 - model_1
  - 전체 마켓 대비 각 마켓 거래 금액 비중 - check_1
 - 210530
  키값 변경 및 추가: info, data, data_info
  기능 추가
  - 마켓별 전체 시간 통계량 추가 - filter
  - 마켓별 이전 대비 거래 금액 비중 - model_1
 - 210531
  model_1_all에 key값 적용완료
 - 210601
  check에 key값 적용 및 원하는 조건 확인 구현 완료
  추가로 진행해야 할 점
  - model_1_all의 mean price 계산방법 맞는지 확인 필요
  - check에서 1분 데이터 외에도 기준 시간을 체크할 수 있도록 구현 필요
 - 210602
  확인 조건 변경해가면서 데이터 확인중(뻘짓중)
 - 210603
  거래량 순간변화율, 거래량 평균변화율, 평균거래가 순간변화율, 평균거래가 평균변화율을 지표로 
 - 210604
  주말에도 하루 1시간 이상씩 정리하기! 
 - 210605
  dict_won 재귀함수 구현 완료
 - 210607
  model_1 - candle_acc_trade_price_all_full_mean 수정
 - 210608
  목표: 주문기능 구현, 기능별 스크립트 분리: 부분완료
  패키지 경로 관련 확인해보기
 - 210609
  패키지 경로 관련 문제는 웹페이지 구현시 확인하기
  자동매매 기능 구현부터
 - 210610
  자동매매 기능 구현 완료(룰베이스)
  결과 확인하기
  본가 ip 등록
  데이터 수집 필요
 - 210611
  함수별 기능 분리
  - market_check 함수의 요청 시간 확인 기능 제거 및 run 스크립트에 구현 완료
  - order 함수에서 check_order 함수 제거 및 run 스크립트에 구현 완료
  run 스크립트 기능 추가
  - 데이터 수집 시간 지정: 10초~15초
  - 매수금액에 거래량 가중치 추가 - 적용 대기
  - check_model로 진행하지 말고 model_all로 진행할 것(현재 모델에는 check_model이 필요하지 않고 시간만 소모됨)
    -> market_one 함수 구현 완료
  - 전체 마켓 대상이 아닌 일부 마켓으로 진행 가능하도록 로직 추가 필요
  모델 기능 추가
  - parse 및 model 10, 30, 60분 데이터 추가 및 활용방법 확인 필요
  - parse_market 고가, 저가 데이터 추가 및 활용방법 확인 필요
 - 210612
  run 스크립트 기능 추가 필요
   - 후보마켓 필터링을 통해 전체 마켓 확인 속도 개선
   - 일정 시간 이후(기준 확인 필요) 시장가 매도 기능 추가
 - 210613
  후보마켓 필터링을 통해 전체 마켓 확인 속도 개선 적용, 지속적인 개선 필요
 - 210614
  for문 대신 while 및 pop을 통해 0~5초간 stan_time 확인 작업을 통한 확인속도 개선 완료
  3분후 시장가 매도 기능 추가(~10초) 완료
  run 스크립트 모듈화
   1. 어깨에 사서 머리에 파는 로직
    - 
  시간체크 기능 함수화
  model_one 기능추가: 평균거래량 기준 추가
 - 210615
  구간시간별 통계량 계산
   - 가격변화량(최고 - 최저) 평균
   - 가격변화량(최고/최저 - 평균가) 표준편차
   - 구간시간별 평균가 표준편차
  model_1_all 함수 제거해야 할 듯
   - 한개 마켓에만 적용되는 변량 확인 필요
   - 전체 마켓에 적용 가능한 변량으로 새로 만들 것
  parse_market 시간 수정 필요 (:59)
 - 210616
 - 210617
  parse_market 에서 데이터 핸들링까지 진행
  check_market 에서 parse_market을 바로 사용하는 방향으로
 - 210620
  upbit_cuotation_0.99 완료
  test_run 수정 필요
 - 210623
  DB 생성중
  DB 관리 및 시각화 방안 확인
 - 210624
  DB handling 스크립트화
  월별 DB 쌓는 중
 - 210625
  전체 마켓 거래량 테이블은 view가 아닌 새로 생성하는 것이 나음(union, view로 진행하는 경우 index가 깨짐)
 - 210626
  분석 및 웹페이지 구현에 hadoop 적용 가능한지 확인해보기
  모델 평가방법 수립 
 - 210627
  해야할 것
   - 데이터 시각화(R ggplot)
   - DB 완성(0701 기준)
   - 하둡 사용방법 확인
   - 웹페이지 구현(구글차트)
   - 홈서버 구현(NAS)
 - 210628
  데이터 시각화(~06/30)
  R 버전 업데이트 완료
  ggplot 사용, dplyr은 사용하지 않는 것이 좋을듯 (최대 row 개수: 1440?)
 - 210629
  누락시간 채우기 및 평균가격 필드 추가 - python으로 진행 후 새로 DB 생성
  DB 생성부분 정리 필요
   - 함수화
   - 5분단위 생성시 0:00부터 생성되지 않음 (정렬문제인 것으로 보임)
   - api 데이터 insert부분 execute -> executemany로 변경하기
 - 210630
  5분단위 생성 시작시간 문제: 정렬문제 맞았음, 처리 완료
   -> mean price column 추가 및 특정범위 데이터 테이블을 따로 만드는 것은 비효율적으로 보임 - select 이용하여 그때그때 받아오기
  api 데이터 insert부분 execute -> executemany로 변경 완료 -> DB 생성 속도 개선
  비어있는 시간 데이터 추가하여 새로 DB 생성
 - 210701
  group by 데이터 시작시간 출력문제: 우선 보류
   - 레코드 순서를 변경하는 것은 비효율적으로 보임
   - 데이터에는 문제가 없는것으로 확인
   - 추후 출력부분을 처리하면 될 듯
  분데이터 활용 시각화 방안 고려해보기
   - 최대 100개 데이터 출력
 - 210702
  비어있는 데이터 업로드 스크립트 작성 완료 및 DB insert 완료
  시각화를 위한 select 쿼리 어느정도 작성 완료
  예측모델부터 만들지 웹페이지부터 만들지 정하기
 - 210702
  예측모델부터 진행
  ANN을 위한 feature engineering
   - 종속변수: 1분간 최고 거래가 증감률((high_price/opening_price) - 1)
   - 독립변수:
    거래량(-1 ~, -10 ~)
    거래가격 표준편차(-2 ~, -10 ~)
    거래량 비율(-1 ~ / -2 ~ -1, -5 ~ -1, -10 ~ -1)
    평균가격 증감률(-1 ~ / -2 ~ -1, -5 ~ -1, -10 ~ -1)
  * 시간과 자원이 한정되어있기 때문에 분석 스크립트는 최적화가 되어야 함
   -> 언어별 특성을 이해해야 함: R의 경우 python과 달리 기본 type이 2차원 데이터인 dataframe이므로 고려햘 점이 많음
 - 210704
  1분간 최고 거래가 증감률, 거래량, 거래량 비율 계산 완료
 - 210705
  거래가격 표준편차, 평균가격 증감률 계산 완료
  회귀분석 진행 완료
   - "결측으로 인하여 144개의 관측치가 삭제되었습니다." 확인 - candle_acc_trade_volume가 0인 경우 NaN으로 표기
   - y_high_price_ratio
                                          Estimate Std. Error t value Pr(>|t|)    
   (Intercept)                        7.207e-02  4.208e-03  17.125  < 2e-16 ***
   candle_acc_trade_price_sum_01      1.539e-13  2.075e-14   7.416 1.23e-13 ***  !
   candle_acc_trade_price_sum_05     -2.498e-15  7.798e-15  -0.320  0.74872    
   candle_acc_trade_price_sum_10      1.338e-14  3.692e-15   3.625  0.00029 ***
   minmax_price_sd_ratio_02           1.913e-01  1.005e-02  19.029  < 2e-16 ***  !
   minmax_price_sd_ratio_05           4.580e-02  1.514e-02   3.025  0.00249 **   !
   minmax_price_sd_ratio_10           1.320e-01  1.293e-02  10.208  < 2e-16 ***  !
   candle_acc_trade_price_compare_02 -3.324e-07  1.695e-06  -0.196  0.84449    
   candle_acc_trade_price_compare_05  5.557e-06  8.963e-06   0.620  0.53528    
   candle_acc_trade_price_compare_10  6.588e-06  1.013e-05   0.651  0.51534    
   mean_price_compare_02             -4.191e-02  6.657e-03  -6.295 3.10e-10 ***  !
   mean_price_compare_05             -3.362e-03  7.129e-03  -0.472  0.63726    
   mean_price_compare_10             -2.663e-02  4.219e-03  -6.310 2.81e-10 ***  !
   - y_mean_price_increase
                                       Estimate Std. Error t value Pr(>|t|)    
   (Intercept)                        7.761e-01  4.740e-03 163.718  < 2e-16 ***
   candle_acc_trade_price_sum_01     -5.713e-14  2.338e-14  -2.444   0.0145 *  
   candle_acc_trade_price_sum_05      1.280e-15  8.784e-15   0.146   0.8842    
   candle_acc_trade_price_sum_10      7.515e-16  4.159e-15   0.181   0.8566    
   minmax_price_sd_ratio_02           2.753e-02  1.132e-02   2.432   0.0150 *  
   minmax_price_sd_ratio_05           1.459e-02  1.705e-02   0.856   0.3922    
   minmax_price_sd_ratio_10          -1.035e-02  1.457e-02  -0.710   0.4776    
   candle_acc_trade_price_compare_02 -2.499e-07  1.909e-06  -0.131   0.8959    
   candle_acc_trade_price_compare_05  2.909e-06  1.010e-05   0.288   0.7733    
   candle_acc_trade_price_compare_10  6.183e-06  1.141e-05   0.542   0.5878    
   mean_price_compare_02              2.858e-01  7.499e-03  38.117  < 2e-16 ***  !!
   mean_price_compare_05             -5.340e-02  8.031e-03  -6.649 2.98e-11 ***  !!
   mean_price_compare_10             -8.565e-03  4.753e-03  -1.802   0.0715 .  
  정규화 진행 후 다시 해볼 것!
  범주형 종속변수 추가 하기(y_high_price_ratio_0.5)
  회귀분석 결과 바탕으로 매매모델 수정 필요 
   
